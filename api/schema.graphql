# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""The type of permission action"""
enum ActionType {
  ALL
  DELETE
  READ
  UPDATE
  WRITE
}

type Asset {
  autoGenerated: String!
  id: ID!
  name: String!
  originalName: String!
  preview: String!
  source: String!
  type: String!
}

input AssignRoleInput {
  roleId: String!
  userId: String!
}

type AuthenticateUserSuccess {
  token: String!
}

type Channel {
  code: String!
  createdAt: DateTime!
  createdBy: String!
  currencyCode: String!
  defaultLanguageCode: String!
  id: Int!
  isDefault: Boolean!
  name: String!
  status: String!
  token: String!
  type: String!
  updatedAt: DateTime!
}

type Collection {
  autoGenerated: Boolean!
  channelToken: String!
  createdAt: DateTime!
  createdBy: String
  deletedAt: DateTime
  deletedBy: String
  description: String
  documents: [Asset!]
  featuredAsset: Asset
  featuredAssetId: ID
  id: ID!
  isDynamic: Boolean!
  isPrivate: Boolean!
  name: String!
  parentId: ID
  products: [Product!]
  rules: [CollectionFilter!]
  seoMetadata: SeoMetadata
  slug: String
  updatedAt: DateTime!
  updatedBy: String
}

type CollectionFilter {
  args: [FilterArgument!]!
  code: RuleType!
}

input CollectionFilterInput {
  args: [FilterArgumentInput!]!
  code: RuleType!
}

"""Available user permissions"""
enum CommonPermission {
  CREATE_ARTICLE_GLOBAL
  CREATE_ASSET_GLOBAL
  CREATE_CATALOG_GLOBAL
  CREATE_CHANNEL_GLOBAL
  CREATE_COLLECTION_GLOBAL
  CREATE_FACET_GLOBAL
  CREATE_FACET_VALUE_GLOBAL
  CREATE_PERMISSION_GLOBAL
  CREATE_PRODUCT_CATEGORY_GLOBAL
  CREATE_PRODUCT_GLOBAL
  CREATE_ROLE_GLOBAL
  CREATE_SEO_METADATA_GLOBAL
  CREATE_USER_GLOBAL
  DELETE_ARTICLE_GLOBAL
  DELETE_ASSET_GLOBAL
  DELETE_CATALOG_GLOBAL
  DELETE_CHANNEL_GLOBAL
  DELETE_COLLECTION_GLOBAL
  DELETE_FACET_GLOBAL
  DELETE_FACET_VALUE_GLOBAL
  DELETE_PERMISSION_GLOBAL
  DELETE_PRODUCT_CATEGORY_GLOBAL
  DELETE_PRODUCT_GLOBAL
  DELETE_ROLE_GLOBAL
  DELETE_SEO_METADATA_GLOBAL
  DELETE_USER_GLOBAL
  MANAGE_ASSET_GLOBAL
  MANAGE_COLLECTION_GLOBAL
  MANAGE_FACET_GLOBAL
  MANAGE_FACET_VALUE_GLOBAL
  READ_ARTICLE_GLOBAL
  READ_ASSET_GLOBAL
  READ_CATALOG_GLOBAL
  READ_CHANNEL_GLOBAL
  READ_COLLECTION_GLOBAL
  READ_FACET_GLOBAL
  READ_FACET_VALUE_GLOBAL
  READ_NAVBAR_ITEMS_GLOBAL
  READ_PERMISSION_GLOBAL
  READ_PRODUCT_CATEGORY_GLOBAL
  READ_PRODUCT_GLOBAL
  READ_ROLE_GLOBAL
  READ_SEO_METADATA_GLOBAL
  READ_USER_GLOBAL
  READ_USER_SELF
  UPDATE_ARTICLE_GLOBAL
  UPDATE_ASSET_GLOBAL
  UPDATE_CATALOG_GLOBAL
  UPDATE_CHANNEL_GLOBAL
  UPDATE_COLLECTION_GLOBAL
  UPDATE_FACET_GLOBAL
  UPDATE_FACET_VALUE_GLOBAL
  UPDATE_PERMISSION_GLOBAL
  UPDATE_PRODUCT_CATEGORY_GLOBAL
  UPDATE_PRODUCT_GLOBAL
  UPDATE_ROLE_GLOBAL
  UPDATE_SEO_METADATA_GLOBAL
  UPDATE_USER_GLOBAL
  WRITE_ARTICLE_GLOBAL
  WRITE_ASSET_GLOBAL
  WRITE_CATALOG_GLOBAL
  WRITE_CHANNEL_GLOBAL
  WRITE_COLLECTION_GLOBAL
  WRITE_FACET_GLOBAL
  WRITE_FACET_VALUE_GLOBAL
  WRITE_PERMISSION_GLOBAL
  WRITE_PRODUCT_CATEGORY_GLOBAL
  WRITE_PRODUCT_GLOBAL
  WRITE_ROLE_GLOBAL
  WRITE_SEO_METADATA_GLOBAL
  WRITE_USER_GLOBAL
  WRITE_USER_SELF
}

input CreateChannelInput {
  code: String!
  currencyCode: String!
  defaultLanguageCode: String!
  isDefault: Boolean
  name: String!
  status: String
  type: String!
}

input CreateCollectionInput {
  description: String
  documentIds: [ID!]
  featuredAssetId: ID
  isDynamic: Boolean
  isPrivate: Boolean
  name: String!
  parentId: ID
  productIds: [String!]
  rules: [CollectionFilterInput!]
  seoMetadata: CreateSeoMetadataInput
  slug: String
}

input CreateFacetInput {
  code: String!
  isPrivate: Boolean! = false
  name: String!
}

input CreateFacetValueInput {
  code: String!
  facetId: ID!
  name: String!
}

input CreatePermissionDto {
  action: ActionType!
  permissionType: ActionType
  resource: ResourceType!
  scope: ScopeType!
  specificScopeId: String
}

input CreateProductInput {
  autoGenerated: Boolean
  description: String
  documentIds: [String!]
  facetValueIds: [String!]
  featuredAssetId: String
  isPrivate: Boolean
  name: String!
  seoMetadata: CreateSeoMetadataInput
  slug: String!
}

input CreateRoleDto {
  name: String!
}

type CreateRoleResponse {
  id: ID!
  name: String!
}

input CreateSeoMetadataInput {
  alternates: String
  canonicalUrl: String
  changefreq: String
  description: String!
  hreflang: String
  keywords: String!
  name: String
  ogDescription: String
  ogImage: String
  ogTitle: String
  pageType: String
  path: String
  priority: Float
  robots: String
  schemaMarkup: JSON
  title: String!
}

type CreateUserAccountSuccess {
  createdAt: DateTime!
  createdBy: String
  deletedAt: DateTime
  deletedBy: String
  email: String!
  emailVerified: Boolean!
  id: ID!
  isActive: String!
  roleId: ID!
  updatedAt: DateTime!
  updatedBy: String
}

input CreateUserDto {
  email: String!
  emailVerified: Boolean!
  isActive: UserActiveStatus!
  password: String!
  roleId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input EmailInput {
  email: String!
}

type Facet {
  code: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  isPrivate: Boolean!
  name: String!
  updatedAt: DateTime!
  values: [FacetValue!]
}

type FacetValue {
  code: String!
  facet: Facet
  id: ID!
  name: String!
}

input FacetValueInput {
  code: String!
  id: String!
  name: String!
}

type FilterArgument {
  name: String!
  value: String!
}

input FilterArgumentInput {
  name: String!
  value: String!
}

type FindCollectionsResponse {
  items: [Collection!]!
  pagination: PaginatedResponseMeta!
}

type FindFacetValuesResponse {
  items: [FacetValue!]!
  pagination: PaginatedResponseMeta!
}

type FindFacetsResponse {
  items: [Facet!]!
  pagination: PaginatedResponseMeta!
}

type FindPermissionsResponseType {
  items: [Permission!]!
  pagination: PaginatedResponseMeta!
}

type FindProductsResponse {
  items: [Product!]!
  pagination: PaginatedResponseMeta!
}

type FindRolesResponseType {
  items: [Role!]!
  pagination: PaginatedResponseMeta!
}

type FindSeoMetadataResponse {
  items: [SeoMetadata!]!
  pagination: PaginatedResponseMeta!
}

type FindUsersResponseType {
  items: [UserType!]!
  pagination: PaginatedResponseMeta!
}

input IDInput {
  id: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginUserDto {
  email: String!
  password: String!
}

type Mutation {
  assignRoleToUser(input: AssignRoleInput!): UserType!
  authenticateUser(input: LoginUserDto!): AuthenticateUserSuccess!
  createChannel(input: CreateChannelInput!): Channel!
  createCollection(input: CreateCollectionInput!): Collection!
  createFacet(input: CreateFacetInput!): Facet!
  createFacetValue(input: CreateFacetValueInput!): FacetValue!
  createFacetValues(input: [CreateFacetValueInput!]!): Float!
  createFacetWithValues(input: CreateFacetInput!, values: [CreateFacetValueInput!]): Facet!
  createPermission(input: CreatePermissionDto!): Permission!
  createProduct(input: CreateProductInput!): Product!
  createRole(input: CreateRoleDto!): CreateRoleResponse!
  createSeoMetadata(input: CreateSeoMetadataInput!): SeoMetadata!
  createUser(input: CreateUserDto!): UserType!
  createUserAccount(input: RegisterUserDto!): CreateUserAccountSuccess!
  deleteChannel(id: Int!): Channel!
  deleteCollection(id: String!): Collection!
  deleteFacet(id: ID!): Facet!
  deleteFacetList(ids: [ID!]!): Float!
  deleteFacetValue(id: ID!): FacetValue!
  deleteProduct(id: String!): Product!
  deleteSeoMetadata(id: String!): SeoMetadata!
  editParentCollection(id: String!, parentId: String): Collection!
  editPermissionDetails(id: String!, input: UpdatePermissionDto!): Permission!
  recoverPermissionById(input: IDInput!): Permission!
  removePermissionById(input: IDInput!): Permission!
  removeRoleById(id: String!): Role!
  renameRoleById(input: RenameRoleDto!): Role!
  setRolePermissions(input: SetRolePermissionsDto!): Role!
  softRemovePermissionById(input: IDInput!): Permission!
  updateChannel(id: Int!, input: UpdateChannelInput!): Channel!
  updateCollection(id: String!, input: UpdateCollectionInput!): Collection!
  updateFacet(input: UpdateFacetInput!): Facet!
  updateFacetValue(input: UpdateFacetValueInput!): FacetValue!
  updateProduct(id: String!, input: UpdateProductInput!): Product!
  updateSeoMetadata(id: String!, input: UpdateSeoMetadataInput!): SeoMetadata!
}

type NavbarChildItem {
  label: String!
  permission: [CommonPermission!]!
  route: String
}

type NavbarItem {
  children: [NavbarChildItem]
  label: String!
  permission: [CommonPermission!]!
  route: String
}

type NavbarResponse {
  navbarItems: [NavbarItem!]!
}

type PaginatedResponseMeta {
  skip: Int!
  take: Int!
  total: Int
}

input PaginationInput {
  skip: Int
  take: Int
}

type Permission {
  action: String!
  createdAt: DateTime
  createdBy: String
  deletedAt: DateTime
  id: String!
  name: String!
  resource: String!
  scope: String!
  specificScopeId: String
  updatedAt: DateTime
  updatedBy: String
}

type Product {
  autoGenerated: Boolean!
  createdAt: DateTime!
  createdBy: String
  description: String
  documents: [Asset!]
  facetValues: [FacetValue!]
  featuredAsset: Asset
  featuredAssetId: String
  id: ID!
  isPrivate: Boolean!
  name: String!
  seoMetadata: SeoMetadata
  slug: String!
  updatedAt: DateTime!
  updatedBy: String
}

type Query {
  activeUser: UserType
  channel(id: Int!): Channel!
  channels: [Channel!]!
  collection(id: String!): Collection!
  collectionProducts(collectionId: String!, pagination: PaginationInput): FindProductsResponse!
  collections(pagination: PaginationInput, parentId: String): FindCollectionsResponse!
  facet(id: ID!): Facet!
  facetValue(id: ID!): FacetValue!
  facetValues(facetId: ID!, skip: Float, take: Float): FindFacetValuesResponse!
  facets(skip: Float, take: Float): FindFacetsResponse!
  findPermissionById(input: IDInput!): Permission
  findRoleById(id: String!): Role
  findUserByEmail(input: EmailInput!): UserType
  findUserById(input: IDInput!): UserType
  getOrCreateDefaultChannel(token: String!): Channel!
  getUserAccessUI: [NavbarResponse!]!
  permissions(input: PaginationInput): FindPermissionsResponseType!
  product(id: String!): Product!
  productBySlug(slug: String!): Product!
  products(pagination: PaginationInput): FindProductsResponse!
  roles(input: PaginationInput): FindRolesResponseType!
  searchCollections(query: String!, skip: Int, take: Int): PaginatedResponseMeta!
  searchFacetValues(query: String!, skip: Int, take: Int): FindFacetValuesResponse!
  searchFacets(query: String!, skip: Int, take: Int): FindFacetsResponse!
  searchProducts(query: String!, skip: Int, take: Int): FindProductsResponse!
  seoMetadata(id: String!): SeoMetadata
  seoMetadatas(pagination: PaginationInput): FindSeoMetadataResponse!
  sitemap: Sitemap!
  users(input: PaginationInput): FindUsersResponseType!
}

input RegisterUserDto {
  email: String!
  isActive: UserActiveStatus!
  password: String!
  roleId: String!
}

input RenameRoleDto {
  id: String!
  name: String!
}

"""The type of resource"""
enum ResourceType {
  BLOG_POST
  BLOG_POST_CATEGORY
  PERMISSION
  PRODUCT_CATEGORY
  ROLE
  USER
}

type Role {
  channelToken: String
  id: ID!
  name: String!
}

"""The rules a user can have"""
enum RuleType {
  FACET_VALUE_FILTER
  PRODUCT_NAME_FILTER
}

"""The type of scope"""
enum ScopeType {
  GLOBAL
  SELF
}

type SeoMetadata {
  alternates: String
  canonicalUrl: String
  changefreq: String
  createdAt: DateTime
  createdBy: String
  deletedAt: DateTime
  deletedBy: String
  description: String!
  hreflang: String
  id: ID!
  keywords: String!
  name: String
  ogDescription: String
  ogImage: String
  ogTitle: String
  pageType: String
  path: String
  priority: Float
  robots: String
  schemaMarkup: JSON
  title: String!
  updatedAt: DateTime
  updatedBy: String
  version: Float!
}

input SetRolePermissionsDto {
  permissionIds: [String!]!
  roleId: String!
}

type Sitemap {
  urls: [SitemapUrl!]!
}

type SitemapUrl {
  changefreq: String
  lastmod: String
  loc: String!
  priority: Float
}

input UpdateChannelInput {
  code: String
  currencyCode: String
  defaultLanguageCode: String
  isDefault: Boolean
  name: String
  status: String
  type: String
}

input UpdateCollectionInput {
  description: String
  documentIds: [ID!]
  featuredAssetId: ID
  isDynamic: Boolean
  isPrivate: Boolean
  name: String
  productIds: [String!]
  rules: [CollectionFilterInput!]
  seoMetadata: UpdateSeoMetadataInput
  slug: String
}

input UpdateFacetInput {
  code: String
  id: ID!
  isPrivate: Boolean = false
  name: String
  values: [FacetValueInput!]
}

input UpdateFacetValueInput {
  code: String
  facetId: ID
  id: ID!
  name: String
}

input UpdatePermissionDto {
  action: ActionType
  permissionType: ActionType
  resource: ResourceType
  scope: ScopeType
  specificScopeId: String
}

input UpdateProductInput {
  autoGenerated: Boolean
  description: String
  documentIds: [String!]
  facetValueIds: [String!]
  featuredAssetId: String
  isPrivate: Boolean
  name: String
  seoMetadata: UpdateSeoMetadataInput
  slug: String
}

input UpdateSeoMetadataInput {
  alternates: String
  canonicalUrl: String
  changefreq: String
  description: String
  hreflang: String
  keywords: String
  name: String
  ogDescription: String
  ogImage: String
  ogTitle: String
  pageType: String
  path: String
  priority: Float
  robots: String
  schemaMarkup: JSON
  title: String
}

"""The active status of a user"""
enum UserActiveStatus {
  ACTIVE
  INACTIVE
}

type UserType {
  createdAt: DateTime!
  createdBy: String
  deletedAt: DateTime
  deletedBy: String
  email: String!
  emailVerified: Boolean!
  id: ID!
  isActive: String!
  roleId: ID!
  updatedAt: DateTime!
  updatedBy: String
}