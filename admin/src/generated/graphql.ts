import { gql } from '@apollo/client';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  DateTime: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

/** The type of permission action */
export enum ActionType {
  All = 'ALL',
  Delete = 'DELETE',
  Read = 'READ',
  Update = 'UPDATE',
  Write = 'WRITE'
}

export type Asset = {
  __typename?: 'Asset';
  autoGenerated: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  originalName: Scalars['String']['output'];
  preview: Scalars['String']['output'];
  source: Scalars['String']['output'];
  type: Scalars['String']['output'];
};

export type AssignRoleInput = {
  roleId: Scalars['String']['input'];
  userId: Scalars['String']['input'];
};

export type AuthenticateUserSuccess = {
  __typename?: 'AuthenticateUserSuccess';
  token: Scalars['String']['output'];
};

export type Channel = {
  __typename?: 'Channel';
  code: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  createdBy: Scalars['String']['output'];
  currencyCode: Scalars['String']['output'];
  defaultLanguageCode: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  isDefault: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  status: Scalars['String']['output'];
  token: Scalars['String']['output'];
  type: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
};

export type Collection = {
  __typename?: 'Collection';
  autoGenerated: Scalars['Boolean']['output'];
  channelToken: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  deletedBy?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  documents?: Maybe<Array<Asset>>;
  featuredAsset?: Maybe<Asset>;
  featuredAssetId?: Maybe<Scalars['ID']['output']>;
  id: Scalars['ID']['output'];
  isDynamic: Scalars['Boolean']['output'];
  isPrivate: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  parentId?: Maybe<Scalars['ID']['output']>;
  products?: Maybe<Array<Product>>;
  rules?: Maybe<Array<CollectionFilter>>;
  seoMetadata?: Maybe<SeoMetadata>;
  slug?: Maybe<Scalars['String']['output']>;
  updatedAt: Scalars['DateTime']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type CollectionFilter = {
  __typename?: 'CollectionFilter';
  args: Array<FilterArgument>;
  code: RuleType;
};

export type CollectionFilterInput = {
  args: Array<FilterArgumentInput>;
  code: RuleType;
};

/** Available user permissions */
export enum CommonPermission {
  CreateArticleGlobal = 'CREATE_ARTICLE_GLOBAL',
  CreateAssetGlobal = 'CREATE_ASSET_GLOBAL',
  CreateCatalogGlobal = 'CREATE_CATALOG_GLOBAL',
  CreateChannelGlobal = 'CREATE_CHANNEL_GLOBAL',
  CreateCollectionGlobal = 'CREATE_COLLECTION_GLOBAL',
  CreateFacetGlobal = 'CREATE_FACET_GLOBAL',
  CreateFacetValueGlobal = 'CREATE_FACET_VALUE_GLOBAL',
  CreatePermissionGlobal = 'CREATE_PERMISSION_GLOBAL',
  CreateProductCategoryGlobal = 'CREATE_PRODUCT_CATEGORY_GLOBAL',
  CreateProductGlobal = 'CREATE_PRODUCT_GLOBAL',
  CreateRoleGlobal = 'CREATE_ROLE_GLOBAL',
  CreateSeoMetadataGlobal = 'CREATE_SEO_METADATA_GLOBAL',
  CreateUserGlobal = 'CREATE_USER_GLOBAL',
  DeleteArticleGlobal = 'DELETE_ARTICLE_GLOBAL',
  DeleteAssetGlobal = 'DELETE_ASSET_GLOBAL',
  DeleteCatalogGlobal = 'DELETE_CATALOG_GLOBAL',
  DeleteChannelGlobal = 'DELETE_CHANNEL_GLOBAL',
  DeleteCollectionGlobal = 'DELETE_COLLECTION_GLOBAL',
  DeleteFacetGlobal = 'DELETE_FACET_GLOBAL',
  DeleteFacetValueGlobal = 'DELETE_FACET_VALUE_GLOBAL',
  DeletePermissionGlobal = 'DELETE_PERMISSION_GLOBAL',
  DeleteProductCategoryGlobal = 'DELETE_PRODUCT_CATEGORY_GLOBAL',
  DeleteProductGlobal = 'DELETE_PRODUCT_GLOBAL',
  DeleteRoleGlobal = 'DELETE_ROLE_GLOBAL',
  DeleteSeoMetadataGlobal = 'DELETE_SEO_METADATA_GLOBAL',
  DeleteUserGlobal = 'DELETE_USER_GLOBAL',
  ManageAssetGlobal = 'MANAGE_ASSET_GLOBAL',
  ManageCollectionGlobal = 'MANAGE_COLLECTION_GLOBAL',
  ManageFacetGlobal = 'MANAGE_FACET_GLOBAL',
  ManageFacetValueGlobal = 'MANAGE_FACET_VALUE_GLOBAL',
  ReadArticleGlobal = 'READ_ARTICLE_GLOBAL',
  ReadAssetGlobal = 'READ_ASSET_GLOBAL',
  ReadCatalogGlobal = 'READ_CATALOG_GLOBAL',
  ReadChannelGlobal = 'READ_CHANNEL_GLOBAL',
  ReadCollectionGlobal = 'READ_COLLECTION_GLOBAL',
  ReadFacetGlobal = 'READ_FACET_GLOBAL',
  ReadFacetValueGlobal = 'READ_FACET_VALUE_GLOBAL',
  ReadPermissionGlobal = 'READ_PERMISSION_GLOBAL',
  ReadProductCategoryGlobal = 'READ_PRODUCT_CATEGORY_GLOBAL',
  ReadProductGlobal = 'READ_PRODUCT_GLOBAL',
  ReadRoleGlobal = 'READ_ROLE_GLOBAL',
  ReadSeoMetadataGlobal = 'READ_SEO_METADATA_GLOBAL',
  ReadUserGlobal = 'READ_USER_GLOBAL',
  ReadUserSelf = 'READ_USER_SELF',
  UpdateArticleGlobal = 'UPDATE_ARTICLE_GLOBAL',
  UpdateAssetGlobal = 'UPDATE_ASSET_GLOBAL',
  UpdateCatalogGlobal = 'UPDATE_CATALOG_GLOBAL',
  UpdateChannelGlobal = 'UPDATE_CHANNEL_GLOBAL',
  UpdateCollectionGlobal = 'UPDATE_COLLECTION_GLOBAL',
  UpdateFacetGlobal = 'UPDATE_FACET_GLOBAL',
  UpdateFacetValueGlobal = 'UPDATE_FACET_VALUE_GLOBAL',
  UpdatePermissionGlobal = 'UPDATE_PERMISSION_GLOBAL',
  UpdateProductCategoryGlobal = 'UPDATE_PRODUCT_CATEGORY_GLOBAL',
  UpdateProductGlobal = 'UPDATE_PRODUCT_GLOBAL',
  UpdateRoleGlobal = 'UPDATE_ROLE_GLOBAL',
  UpdateSeoMetadataGlobal = 'UPDATE_SEO_METADATA_GLOBAL',
  UpdateUserGlobal = 'UPDATE_USER_GLOBAL',
  WriteArticleGlobal = 'WRITE_ARTICLE_GLOBAL',
  WriteAssetGlobal = 'WRITE_ASSET_GLOBAL',
  WriteCatalogGlobal = 'WRITE_CATALOG_GLOBAL',
  WriteChannelGlobal = 'WRITE_CHANNEL_GLOBAL',
  WriteCollectionGlobal = 'WRITE_COLLECTION_GLOBAL',
  WriteFacetGlobal = 'WRITE_FACET_GLOBAL',
  WriteFacetValueGlobal = 'WRITE_FACET_VALUE_GLOBAL',
  WritePermissionGlobal = 'WRITE_PERMISSION_GLOBAL',
  WriteProductCategoryGlobal = 'WRITE_PRODUCT_CATEGORY_GLOBAL',
  WriteProductGlobal = 'WRITE_PRODUCT_GLOBAL',
  WriteRoleGlobal = 'WRITE_ROLE_GLOBAL',
  WriteSeoMetadataGlobal = 'WRITE_SEO_METADATA_GLOBAL',
  WriteUserGlobal = 'WRITE_USER_GLOBAL',
  WriteUserSelf = 'WRITE_USER_SELF'
}

export type CreateChannelInput = {
  code: Scalars['String']['input'];
  currencyCode: Scalars['String']['input'];
  defaultLanguageCode: Scalars['String']['input'];
  isDefault?: InputMaybe<Scalars['Boolean']['input']>;
  name: Scalars['String']['input'];
  status?: InputMaybe<Scalars['String']['input']>;
  type: Scalars['String']['input'];
};

export type CreateCollectionInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  documentIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  featuredAssetId?: InputMaybe<Scalars['ID']['input']>;
  isDynamic?: InputMaybe<Scalars['Boolean']['input']>;
  isPrivate?: InputMaybe<Scalars['Boolean']['input']>;
  name: Scalars['String']['input'];
  parentId?: InputMaybe<Scalars['ID']['input']>;
  productIds?: InputMaybe<Array<Scalars['String']['input']>>;
  rules?: InputMaybe<Array<CollectionFilterInput>>;
  seoMetadata?: InputMaybe<CreateSeoMetadataInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type CreateFacetInput = {
  code: Scalars['String']['input'];
  isPrivate?: Scalars['Boolean']['input'];
  name: Scalars['String']['input'];
};

export type CreateFacetValueInput = {
  code: Scalars['String']['input'];
  facetId: Scalars['ID']['input'];
  name: Scalars['String']['input'];
};

export type CreatePermissionDto = {
  action: ActionType;
  permissionType?: InputMaybe<ActionType>;
  resource: ResourceType;
  scope: ScopeType;
  specificScopeId?: InputMaybe<Scalars['String']['input']>;
};

export type CreateProductInput = {
  autoGenerated?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  documentIds?: InputMaybe<Array<Scalars['String']['input']>>;
  facetValueIds?: InputMaybe<Array<Scalars['String']['input']>>;
  featuredAssetId?: InputMaybe<Scalars['String']['input']>;
  isPrivate?: InputMaybe<Scalars['Boolean']['input']>;
  name: Scalars['String']['input'];
  seoMetadata?: InputMaybe<CreateSeoMetadataInput>;
  slug: Scalars['String']['input'];
};

export type CreateRoleDto = {
  name: Scalars['String']['input'];
};

export type CreateRoleResponse = {
  __typename?: 'CreateRoleResponse';
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type CreateSeoMetadataInput = {
  alternates?: InputMaybe<Scalars['String']['input']>;
  canonicalUrl?: InputMaybe<Scalars['String']['input']>;
  changefreq?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  hreflang?: InputMaybe<Scalars['String']['input']>;
  keywords: Scalars['String']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
  ogDescription?: InputMaybe<Scalars['String']['input']>;
  ogImage?: InputMaybe<Scalars['String']['input']>;
  ogTitle?: InputMaybe<Scalars['String']['input']>;
  pageType?: InputMaybe<Scalars['String']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Float']['input']>;
  robots?: InputMaybe<Scalars['String']['input']>;
  schemaMarkup?: InputMaybe<Scalars['JSON']['input']>;
  title: Scalars['String']['input'];
};

export type CreateUserAccountSuccess = {
  __typename?: 'CreateUserAccountSuccess';
  createdAt: Scalars['DateTime']['output'];
  createdBy: Scalars['String']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  deletedBy?: Maybe<Scalars['String']['output']>;
  email: Scalars['String']['output'];
  emailVerified: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  isActive: Scalars['String']['output'];
  roleId: Scalars['ID']['output'];
  updatedAt: Scalars['DateTime']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type CreateUserDto = {
  email: Scalars['String']['input'];
  emailVerified: Scalars['Boolean']['input'];
  isActive: UserActiveStatus;
  password: Scalars['String']['input'];
  roleId: Scalars['String']['input'];
};

export type EmailInput = {
  email: Scalars['String']['input'];
};

export type Facet = {
  __typename?: 'Facet';
  code: Scalars['String']['output'];
  createdAt: Scalars['DateTime']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['ID']['output'];
  isPrivate: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  values?: Maybe<Array<FacetValue>>;
};

export type FacetValue = {
  __typename?: 'FacetValue';
  code: Scalars['String']['output'];
  facet?: Maybe<Facet>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

export type FacetValueInput = {
  code: Scalars['String']['input'];
  id: Scalars['String']['input'];
  name: Scalars['String']['input'];
};

export type FilterArgument = {
  __typename?: 'FilterArgument';
  name: Scalars['String']['output'];
  value: Scalars['String']['output'];
};

export type FilterArgumentInput = {
  name: Scalars['String']['input'];
  value: Scalars['String']['input'];
};

export type FindCollectionsResponse = {
  __typename?: 'FindCollectionsResponse';
  items: Array<Collection>;
  pagination: PaginatedResponseMeta;
};

export type FindFacetValuesResponse = {
  __typename?: 'FindFacetValuesResponse';
  items: Array<FacetValue>;
  pagination: PaginatedResponseMeta;
};

export type FindFacetsResponse = {
  __typename?: 'FindFacetsResponse';
  items: Array<Facet>;
  pagination: PaginatedResponseMeta;
};

export type FindPermissionsResponseType = {
  __typename?: 'FindPermissionsResponseType';
  items: Array<Permission>;
  pagination: PaginatedResponseMeta;
};

export type FindProductsResponse = {
  __typename?: 'FindProductsResponse';
  items: Array<Product>;
  pagination: PaginatedResponseMeta;
};

export type FindRolesResponseType = {
  __typename?: 'FindRolesResponseType';
  items: Array<Role>;
  pagination: PaginatedResponseMeta;
};

export type FindSeoMetadataResponse = {
  __typename?: 'FindSeoMetadataResponse';
  items: Array<SeoMetadata>;
  pagination: PaginatedResponseMeta;
};

export type FindUsersResponseType = {
  __typename?: 'FindUsersResponseType';
  items: Array<UserType>;
  pagination: PaginatedResponseMeta;
};

export type IdInput = {
  id: Scalars['String']['input'];
};

export type LoginUserDto = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
};

export type Mutation = {
  __typename?: 'Mutation';
  assignRoleToUser: UserType;
  authenticateUser: AuthenticateUserSuccess;
  createChannel: Channel;
  createCollection: Collection;
  createFacet: Facet;
  createFacetValue: FacetValue;
  createFacetValues: Scalars['Float']['output'];
  createFacetWithValues: Facet;
  createPermission: Permission;
  createProduct: Product;
  createRole: CreateRoleResponse;
  createSeoMetadata: SeoMetadata;
  createUser: UserType;
  createUserAccount: CreateUserAccountSuccess;
  deleteChannel: Channel;
  deleteCollection: Collection;
  deleteFacet: Facet;
  deleteFacetList: Scalars['Float']['output'];
  deleteFacetValue: FacetValue;
  deleteProduct: Product;
  deleteSeoMetadata: SeoMetadata;
  editParentCollection: Collection;
  editPermissionDetails: Permission;
  recoverPermissionById: Permission;
  removePermissionById: Permission;
  removeRoleById: Role;
  renameRoleById: Role;
  setRolePermissions: Role;
  softRemovePermissionById: Permission;
  updateChannel: Channel;
  updateCollection: Collection;
  updateFacet: Facet;
  updateFacetValue: FacetValue;
  updateProduct: Product;
  updateSeoMetadata: SeoMetadata;
};


export type MutationAssignRoleToUserArgs = {
  input: AssignRoleInput;
};


export type MutationAuthenticateUserArgs = {
  input: LoginUserDto;
};


export type MutationCreateChannelArgs = {
  input: CreateChannelInput;
};


export type MutationCreateCollectionArgs = {
  input: CreateCollectionInput;
};


export type MutationCreateFacetArgs = {
  input: CreateFacetInput;
};


export type MutationCreateFacetValueArgs = {
  input: CreateFacetValueInput;
};


export type MutationCreateFacetValuesArgs = {
  input: Array<CreateFacetValueInput>;
};


export type MutationCreateFacetWithValuesArgs = {
  input: CreateFacetInput;
  values?: InputMaybe<Array<CreateFacetValueInput>>;
};


export type MutationCreatePermissionArgs = {
  input: CreatePermissionDto;
};


export type MutationCreateProductArgs = {
  input: CreateProductInput;
};


export type MutationCreateRoleArgs = {
  input: CreateRoleDto;
};


export type MutationCreateSeoMetadataArgs = {
  input: CreateSeoMetadataInput;
};


export type MutationCreateUserArgs = {
  input: CreateUserDto;
};


export type MutationCreateUserAccountArgs = {
  input: RegisterUserDto;
};


export type MutationDeleteChannelArgs = {
  id: Scalars['Int']['input'];
};


export type MutationDeleteCollectionArgs = {
  id: Scalars['String']['input'];
};


export type MutationDeleteFacetArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteFacetListArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type MutationDeleteFacetValueArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteProductArgs = {
  id: Scalars['String']['input'];
};


export type MutationDeleteSeoMetadataArgs = {
  id: Scalars['String']['input'];
};


export type MutationEditParentCollectionArgs = {
  id: Scalars['String']['input'];
  parentId: Scalars['String']['input'];
};


export type MutationEditPermissionDetailsArgs = {
  id: Scalars['String']['input'];
  input: UpdatePermissionDto;
};


export type MutationRecoverPermissionByIdArgs = {
  input: IdInput;
};


export type MutationRemovePermissionByIdArgs = {
  input: IdInput;
};


export type MutationRemoveRoleByIdArgs = {
  id: Scalars['String']['input'];
};


export type MutationRenameRoleByIdArgs = {
  input: RenameRoleDto;
};


export type MutationSetRolePermissionsArgs = {
  input: SetRolePermissionsDto;
};


export type MutationSoftRemovePermissionByIdArgs = {
  input: IdInput;
};


export type MutationUpdateChannelArgs = {
  id: Scalars['Int']['input'];
  input: UpdateChannelInput;
};


export type MutationUpdateCollectionArgs = {
  id: Scalars['String']['input'];
  input: UpdateCollectionInput;
};


export type MutationUpdateFacetArgs = {
  input: UpdateFacetInput;
};


export type MutationUpdateFacetValueArgs = {
  input: UpdateFacetValueInput;
};


export type MutationUpdateProductArgs = {
  id: Scalars['String']['input'];
  input: UpdateProductInput;
};


export type MutationUpdateSeoMetadataArgs = {
  id: Scalars['String']['input'];
  input: UpdateSeoMetadataInput;
};

export type NavbarChildItem = {
  __typename?: 'NavbarChildItem';
  label: Scalars['String']['output'];
  permission: Array<CommonPermission>;
  route?: Maybe<Scalars['String']['output']>;
};

export type NavbarItem = {
  __typename?: 'NavbarItem';
  children?: Maybe<Array<Maybe<NavbarChildItem>>>;
  label: Scalars['String']['output'];
  permission: Array<CommonPermission>;
  route?: Maybe<Scalars['String']['output']>;
};

export type NavbarResponse = {
  __typename?: 'NavbarResponse';
  navbarItems: Array<NavbarItem>;
};

export type PaginatedResponseMeta = {
  __typename?: 'PaginatedResponseMeta';
  skip: Scalars['Int']['output'];
  take: Scalars['Int']['output'];
  total?: Maybe<Scalars['Int']['output']>;
};

export type PaginationInput = {
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
};

export type Permission = {
  __typename?: 'Permission';
  action: Scalars['String']['output'];
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  id: Scalars['String']['output'];
  name: Scalars['String']['output'];
  resource: Scalars['String']['output'];
  scope: Scalars['String']['output'];
  specificScopeId?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type Product = {
  __typename?: 'Product';
  autoGenerated: Scalars['Boolean']['output'];
  createdAt: Scalars['DateTime']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  documents?: Maybe<Array<Asset>>;
  facetValues?: Maybe<Array<FacetValue>>;
  featuredAsset?: Maybe<Asset>;
  featuredAssetId?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  isPrivate: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  seoMetadata?: Maybe<SeoMetadata>;
  slug: Scalars['String']['output'];
  updatedAt: Scalars['DateTime']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type Query = {
  __typename?: 'Query';
  activeUser?: Maybe<UserType>;
  channel: Channel;
  channels: Array<Channel>;
  collection: Collection;
  collectionProducts: FindProductsResponse;
  collections: FindCollectionsResponse;
  facet: Facet;
  facetValue: FacetValue;
  facetValues: FindFacetValuesResponse;
  facets: FindFacetsResponse;
  findPermissionById?: Maybe<Permission>;
  findRoleById?: Maybe<Role>;
  findUserByEmail?: Maybe<UserType>;
  findUserById?: Maybe<UserType>;
  getOrCreateDefaultChannel: Channel;
  getUserAccessUI: Array<NavbarResponse>;
  permissions: FindPermissionsResponseType;
  product: Product;
  productBySlug: Product;
  products: FindProductsResponse;
  roles: FindRolesResponseType;
  searchCollections: PaginatedResponseMeta;
  searchFacetValues: FindFacetValuesResponse;
  searchFacets: FindFacetsResponse;
  searchProducts: FindProductsResponse;
  seoMetadata?: Maybe<SeoMetadata>;
  seoMetadatas: FindSeoMetadataResponse;
  sitemap: Sitemap;
  users: FindUsersResponseType;
};


export type QueryChannelArgs = {
  id: Scalars['Int']['input'];
};


export type QueryCollectionArgs = {
  id: Scalars['String']['input'];
};


export type QueryCollectionProductsArgs = {
  collectionId: Scalars['String']['input'];
  pagination?: InputMaybe<PaginationInput>;
};


export type QueryCollectionsArgs = {
  pagination?: InputMaybe<PaginationInput>;
  parentId?: InputMaybe<Scalars['String']['input']>;
};


export type QueryFacetArgs = {
  id: Scalars['ID']['input'];
};


export type QueryFacetValueArgs = {
  id: Scalars['ID']['input'];
};


export type QueryFacetValuesArgs = {
  facetId: Scalars['ID']['input'];
  skip?: InputMaybe<Scalars['Float']['input']>;
  take?: InputMaybe<Scalars['Float']['input']>;
};


export type QueryFacetsArgs = {
  skip?: InputMaybe<Scalars['Float']['input']>;
  take?: InputMaybe<Scalars['Float']['input']>;
};


export type QueryFindPermissionByIdArgs = {
  input: IdInput;
};


export type QueryFindRoleByIdArgs = {
  id: Scalars['String']['input'];
};


export type QueryFindUserByEmailArgs = {
  input: EmailInput;
};


export type QueryFindUserByIdArgs = {
  input: IdInput;
};


export type QueryGetOrCreateDefaultChannelArgs = {
  token: Scalars['String']['input'];
};


export type QueryPermissionsArgs = {
  input?: InputMaybe<PaginationInput>;
};


export type QueryProductArgs = {
  id: Scalars['String']['input'];
};


export type QueryProductBySlugArgs = {
  slug: Scalars['String']['input'];
};


export type QueryProductsArgs = {
  pagination?: InputMaybe<PaginationInput>;
};


export type QueryRolesArgs = {
  input?: InputMaybe<PaginationInput>;
};


export type QuerySearchCollectionsArgs = {
  query: Scalars['String']['input'];
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
};


export type QuerySearchFacetValuesArgs = {
  query: Scalars['String']['input'];
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
};


export type QuerySearchFacetsArgs = {
  query: Scalars['String']['input'];
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
};


export type QuerySearchProductsArgs = {
  query: Scalars['String']['input'];
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
};


export type QuerySeoMetadataArgs = {
  id: Scalars['String']['input'];
};


export type QuerySeoMetadatasArgs = {
  pagination?: InputMaybe<PaginationInput>;
};


export type QueryUsersArgs = {
  input?: InputMaybe<PaginationInput>;
};

export type RegisterUserDto = {
  email: Scalars['String']['input'];
  isActive: UserActiveStatus;
  password: Scalars['String']['input'];
  roleId: Scalars['String']['input'];
};

export type RenameRoleDto = {
  id: Scalars['String']['input'];
  name: Scalars['String']['input'];
};

/** The type of resource */
export enum ResourceType {
  BlogPost = 'BLOG_POST',
  BlogPostCategory = 'BLOG_POST_CATEGORY',
  Permission = 'PERMISSION',
  ProductCategory = 'PRODUCT_CATEGORY',
  Role = 'ROLE',
  User = 'USER'
}

export type Role = {
  __typename?: 'Role';
  channelToken?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
};

/** The rules a user can have */
export enum RuleType {
  FacetValueFilter = 'FACET_VALUE_FILTER',
  ProductNameFilter = 'PRODUCT_NAME_FILTER'
}

/** The type of scope */
export enum ScopeType {
  Global = 'GLOBAL',
  Self = 'SELF'
}

export type SeoMetadata = {
  __typename?: 'SeoMetadata';
  alternates?: Maybe<Scalars['String']['output']>;
  canonicalUrl?: Maybe<Scalars['String']['output']>;
  changefreq?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTime']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  deletedBy?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  hreflang?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  keywords: Scalars['String']['output'];
  name?: Maybe<Scalars['String']['output']>;
  ogDescription?: Maybe<Scalars['String']['output']>;
  ogImage?: Maybe<Scalars['String']['output']>;
  ogTitle?: Maybe<Scalars['String']['output']>;
  pageType?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  priority?: Maybe<Scalars['Float']['output']>;
  robots?: Maybe<Scalars['String']['output']>;
  schemaMarkup?: Maybe<Scalars['JSON']['output']>;
  title: Scalars['String']['output'];
  updatedAt?: Maybe<Scalars['DateTime']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
  version: Scalars['Float']['output'];
};

export type SetRolePermissionsDto = {
  permissionIds: Array<Scalars['String']['input']>;
  roleId: Scalars['String']['input'];
};

export type Sitemap = {
  __typename?: 'Sitemap';
  urls: Array<SitemapUrl>;
};

export type SitemapUrl = {
  __typename?: 'SitemapUrl';
  changefreq?: Maybe<Scalars['String']['output']>;
  lastmod?: Maybe<Scalars['String']['output']>;
  loc: Scalars['String']['output'];
  priority?: Maybe<Scalars['Float']['output']>;
};

export type UpdateChannelInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  currencyCode?: InputMaybe<Scalars['String']['input']>;
  defaultLanguageCode?: InputMaybe<Scalars['String']['input']>;
  isDefault?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateCollectionInput = {
  description?: InputMaybe<Scalars['String']['input']>;
  documentIds?: InputMaybe<Array<Scalars['ID']['input']>>;
  featuredAssetId?: InputMaybe<Scalars['ID']['input']>;
  isDynamic?: InputMaybe<Scalars['Boolean']['input']>;
  isPrivate?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  productIds?: InputMaybe<Array<Scalars['String']['input']>>;
  rules?: InputMaybe<Array<CollectionFilterInput>>;
  seoMetadata?: InputMaybe<UpdateSeoMetadataInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateFacetInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  isPrivate?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  values?: InputMaybe<Array<FacetValueInput>>;
};

export type UpdateFacetValueInput = {
  code?: InputMaybe<Scalars['String']['input']>;
  facetId?: InputMaybe<Scalars['ID']['input']>;
  id: Scalars['ID']['input'];
  name?: InputMaybe<Scalars['String']['input']>;
};

export type UpdatePermissionDto = {
  action?: InputMaybe<ActionType>;
  permissionType?: InputMaybe<ActionType>;
  resource?: InputMaybe<ResourceType>;
  scope?: InputMaybe<ScopeType>;
  specificScopeId?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateProductInput = {
  autoGenerated?: InputMaybe<Scalars['Boolean']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  documentIds?: InputMaybe<Array<Scalars['String']['input']>>;
  facetValueIds?: InputMaybe<Array<Scalars['String']['input']>>;
  featuredAssetId?: InputMaybe<Scalars['String']['input']>;
  isPrivate?: InputMaybe<Scalars['Boolean']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  seoMetadata?: InputMaybe<UpdateSeoMetadataInput>;
  slug?: InputMaybe<Scalars['String']['input']>;
};

export type UpdateSeoMetadataInput = {
  alternates?: InputMaybe<Scalars['String']['input']>;
  canonicalUrl?: InputMaybe<Scalars['String']['input']>;
  changefreq?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  hreflang?: InputMaybe<Scalars['String']['input']>;
  keywords?: InputMaybe<Scalars['String']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  ogDescription?: InputMaybe<Scalars['String']['input']>;
  ogImage?: InputMaybe<Scalars['String']['input']>;
  ogTitle?: InputMaybe<Scalars['String']['input']>;
  pageType?: InputMaybe<Scalars['String']['input']>;
  path?: InputMaybe<Scalars['String']['input']>;
  priority?: InputMaybe<Scalars['Float']['input']>;
  robots?: InputMaybe<Scalars['String']['input']>;
  schemaMarkup?: InputMaybe<Scalars['JSON']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
};

/** The active status of a user */
export enum UserActiveStatus {
  Active = 'ACTIVE',
  Inactive = 'INACTIVE'
}

export type UserType = {
  __typename?: 'UserType';
  createdAt: Scalars['DateTime']['output'];
  createdBy: Scalars['String']['output'];
  deletedAt?: Maybe<Scalars['DateTime']['output']>;
  deletedBy?: Maybe<Scalars['String']['output']>;
  email: Scalars['String']['output'];
  emailVerified: Scalars['Boolean']['output'];
  id: Scalars['ID']['output'];
  isActive: Scalars['String']['output'];
  roleId: Scalars['ID']['output'];
  updatedAt: Scalars['DateTime']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};
