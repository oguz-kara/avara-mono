'use client'
import React, { useRef } from 'react'
import {
  useForm,
  Controller,
  FormProvider,
  useFormContext,
} from 'react-hook-form'
import { z } from 'zod'
import { zodResolver } from '@hookform/resolvers/zod'
import { Breadcrumbs, Button, Stack } from '@mui/material'
import Box from '@mui/material/Box'
import Typography from '@avc/components/ui/typography'
import FormLabel from '@avc/components/ui/label'
import TextField from '@avc/components/ui/text-field'
import Switch from '@avc/components/ui/switch'
import Card, { CardContent, CardActions } from '@avc/components/ui/card'
import {
  MenuButtonBold,
  MenuButtonItalic,
  MenuControlsContainer,
  MenuDivider,
  MenuSelectHeading,
  RichTextEditor,
  type RichTextEditorRef,
} from 'mui-tiptap'
import StarterKit from '@tiptap/starter-kit'
import AssetPickerDialog from '@avc/features/assets/components/asset-picker-dialog'
import { useMutation } from '@avc/lib/hooks/use-mutation'
import { UPDATE_PRODUCT } from '@avc/graphql/mutations'
import { useSnackbar } from '@avc/context/snackbar-context'
import FacetValuePickerDialog from '../pickers/facet-value-picker-dialog'
import FormLayout from '@avc/components/layout/form-layout'
import { UpdateProductInput, Facet, Product } from '@avc/generated/graphql'
import Link from 'next/link'
import { SeoMetadataForm } from '@avc/features/seo/components/seo-metadata-form'
import FormTabs from '@avc/components/common/form-tabs'
import FormHeader from '@avc/components/common/typography/form-header'
import { seoMetadataSchema } from '@avc/features/seo/schema/seo-metadata.schema'
import { useRouter } from 'next/navigation'

const updateProductSchema = z.object({
  autoGenerated: z.boolean().optional(),
  description: z.string().min(1, 'Açıklama zorunludur'),
  isPrivate: z.boolean().optional(),
  facetValueIds: z.array(z.string()).optional(),
  name: z.string().min(1, 'Ürün adı zorunludur'),
  slug: z.string().min(1, 'Slug zorunludur'),
  assets: z.array(z.any()).optional(),
  seoMetadata: seoMetadataSchema,
})

type UpdateProductInputForm = z.infer<typeof updateProductSchema>

export default function UpdateProductForm({
  product,
  facets,
}: {
  product: Product
  facets: Facet[]
}) {
  const router = useRouter()
  const { snackbar } = useSnackbar()
  const [updateProductMutation, { loading: updateProductLoading }] =
    useMutation(UPDATE_PRODUCT)

  const rteRef = useRef<RichTextEditorRef>(null)
  const formMethods = useForm<UpdateProductInputForm>({
    resolver: zodResolver(updateProductSchema),
    defaultValues: convertApiDataToFormData(product),
  })

  const { control, handleSubmit } = formMethods

  const updateProduct = async (data: UpdateProductInputForm) => {
    const normalizedData = convertFormDataToApiInput(data)
    const result = await updateProductMutation({
      variables: { input: normalizedData, id: product.id },
    })
    return result.data?.updateProduct
  }

  const onSubmit = async (data: UpdateProductInputForm) => {
    const updatedProduct = await updateProduct(data)

    if (updatedProduct) {
      router.push(`/katalog/urunler`)

      snackbar({
        message: 'Ürün başarıyla güncellendi',
        variant: 'default',
      })
    } else {
      snackbar({
        message: 'Ürün güncellenirken bir hata oluştu',
        variant: 'error',
      })
    }
  }

  const detailsForm = (
    <Stack direction="column" spacing={4} sx={{ px: 4 }}>
      <FormHeader
        title="Ürün Detayları"
        tooltip="Ürünün detaylarını buradan düzenleyebilirsiniz"
      />

      {/* Product Name and Slug Fields */}
      <Box sx={{ display: 'flex', gap: 2 }}>
        <Controller
          name="name"
          control={control}
          render={({ field, fieldState: { error } }) => (
            <TextField
              {...field}
              error={!!error}
              helperText={error?.message}
              placeholder="Ürün adı buraya..."
              fullWidth
            />
          )}
        />
        <Controller
          name="slug"
          control={control}
          render={({ field, fieldState: { error } }) => (
            <TextField
              {...field}
              error={!!error}
              helperText={error?.message}
              placeholder="Slug"
              fullWidth
            />
          )}
        />
      </Box>

      <Box>
        <FormLabel sx={{ display: 'block' }}>Ürün Açıklaması</FormLabel>
        <Typography variant="caption" color="textSecondary">
          Bu ürün için kısa bir açıklama yazın
        </Typography>
        <Controller
          name="description"
          control={control}
          render={({ field }) => (
            <RichTextEditor
              ref={rteRef}
              extensions={[StarterKit]}
              content={field.value}
              onUpdate={({ editor }) => {
                field.onChange(editor.getHTML())
              }}
              renderControls={() => (
                <MenuControlsContainer>
                  <MenuSelectHeading />
                  <MenuDivider />
                  <MenuButtonBold />
                  <MenuButtonItalic />
                </MenuControlsContainer>
              )}
              editorProps={{
                attributes: {
                  style: 'height: 200px; overflow-y: auto;',
                },
              }}
            />
          )}
        />
      </Box>

      <Box>
        <Controller
          name="assets"
          control={control}
          render={({ field }) => (
            <AssetPickerDialog
              selectedAssets={field.value || []}
              onAssetsChange={field.onChange}
            />
          )}
        />
      </Box>
    </Stack>
  )

  const seoMetadataForm = <SeoMetadataForm isProduct />

  const tabs = [
    { label: 'Ürün Detayları', node: detailsForm },
    { label: 'SEO', node: seoMetadataForm },
  ]

  const rightContent = (
    <PublishCard loading={updateProductLoading} facets={facets} />
  )

  const header = (
    <Box
      sx={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
      }}
    >
      <Typography sx={{ px: 4 }} variant="h5" fontWeight="bold">
        Ürün Detayı | Güncelle
      </Typography>
      <Breadcrumbs sx={{ px: 4 }}>
        <Typography color="text.primary">Katalog</Typography>
        <Link href="/katalog/urunler">
          <Typography color="text.primary">Ürünler</Typography>
        </Link>
        <Typography color="textDisabled">Ürün Detayı | Güncelle</Typography>
      </Breadcrumbs>
    </Box>
  )

  return (
    <FormProvider {...formMethods}>
      <form onSubmit={handleSubmit(onSubmit, (e) => console.log(e))}>
        <FormLayout
          title={header}
          leftContent={<FormTabs tabs={tabs} />}
          rightContent={rightContent}
        />
      </form>
    </FormProvider>
  )
}

function PublishCard({
  loading,
  facets,
}: {
  loading: boolean
  facets: Facet[]
}) {
  const {
    control,
    formState: { isDirty },
    watch,
  } = useFormContext<UpdateProductInputForm>()

  const isPrivate = watch('isPrivate')

  return (
    <Card sx={{ p: 0 }}>
      <CardContent sx={{ p: 0 }}>
        <Box
          sx={{
            display: 'flex',
            justifyContent: 'space-between',
            borderBottom: '1px solid',
            borderColor: 'divider',
            p: 2,
          }}
        >
          <Box>
            <Typography variant="h6">Yayınla</Typography>
            <Typography variant="body2">Ürünü şimdi yayınlayın</Typography>
          </Box>
          <Box>
            <Controller
              name="isPrivate"
              control={control}
              render={({ field }) => (
                <Switch
                  {...field}
                  checked={field.value || false}
                  onChange={(e) => field.onChange(e.target.checked)}
                />
              )}
            />
          </Box>
        </Box>
        <Box sx={{ px: 2, pt: 2 }}>
          <Controller
            name="facetValueIds"
            control={control}
            render={({ field }) => (
              <FacetValuePickerDialog
                facets={facets}
                selectedFacetValues={field.value || []}
                onSelectionChange={(selected) =>
                  field.onChange(selected as string[])
                }
              />
            )}
          />
        </Box>
      </CardContent>
      <CardActions
        sx={{
          p: 2,
        }}
      >
        <Button
          disabled={!isDirty || loading}
          variant="contained"
          size="large"
          fullWidth
          type="submit"
        >
          <Typography
            variant="button"
            sx={{ textTransform: 'none' }}
            fontWeight="bold"
          >
            {loading
              ? 'Kaydediliyor...'
              : !isPrivate
              ? 'Şimdi yayınla'
              : 'Kaydet'}
          </Typography>
        </Button>
      </CardActions>
    </Card>
  )
}

function convertFormDataToApiInput(
  product: UpdateProductInputForm
): UpdateProductInput {
  const documentIds = product.assets
    ?.filter((a) => a.type === 'DOCUMENT')
    ?.map((d) => d.id)

  return {
    name: product.name,
    slug: product.slug,
    description: product.description,
    isPrivate: product.isPrivate,
    facetValueIds: product.facetValueIds,
    featuredAssetId: product.assets?.find((a) => a.featured)?.id,
    documentIds,
    seoMetadata: product.seoMetadata as any,
  }
}

function convertApiDataToFormData(product: Product): UpdateProductInputForm {
  const documents = product.documents || []
  let assets = product.featuredAsset
    ? [{ ...product.featuredAsset, featured: true }]
    : []

  if (documents.length > 0) assets = [...assets, ...documents] as any[]

  return {
    autoGenerated: product.autoGenerated,
    isPrivate: product.isPrivate,
    description: product.description || '',
    name: product.name,
    slug: product.slug,
    facetValueIds: product.facetValues?.map((fv) => fv.id) || [],
    assets,
    seoMetadata: product.seoMetadata as any,
  }
}
